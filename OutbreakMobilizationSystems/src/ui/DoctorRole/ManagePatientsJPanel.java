/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.DoctorRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organizations.Organization;
import Business.Roles.CareTakerRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientRegistrationRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 * @author ajayp
 * @author nakul
 * @author palak
 * 
 * Revision History:
 * 
 * Date(MM/DD/YYYY)      Author              Comment
 * 04/13/2021            @author nakul       Added DoctorWorkArea JPanel
 * 04/14/2021            @author palak       Added UserAccount, network
 */

public class ManagePatientsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount user;
    Network network;
    Enterprise enterprise;
    
    public ManagePatientsJPanel(JPanel userProcessContainer, UserAccount user, Network network, EcoSystem ecosystem, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.user = user;
        this.network = network;
        this.ecosystem=ecosystem;
        this.enterprise = enterprise;
        populatePatientsTable();
        populateCaretakerCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTreatment = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientDetails = new javax.swing.JTable();
        lblAssignCaretaker = new javax.swing.JLabel();
        comboCaretaker = new javax.swing.JComboBox();
        btnAssign = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTreatment.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        lblTreatment.setText("Treatment to a Patient");
        add(lblTreatment, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, 580, -1));

        tblPatientDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Hospital Name", "Diagnostic Center", "Diagnostician", "Assigned Care Taker", "Samples", "Patient Name", "Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPatientDetails.setRowHeight(50);
        tblPatientDetails.setRowMargin(0);
        jScrollPane1.setViewportView(tblPatientDetails);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 360, 1220, 240));

        lblAssignCaretaker.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblAssignCaretaker.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAssignCaretaker.setText("Assign Care Taker :");
        add(lblAssignCaretaker, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 680, -1, -1));

        comboCaretaker.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        comboCaretaker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item1" }));
        add(comboCaretaker, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 680, 380, -1));

        btnAssign.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAssign.setText("Assign");
        btnAssign.setOpaque(false);
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });
        add(btnAssign, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 770, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/doctorprescnew.jpg"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1440, 1080));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatientDetails.getSelectedRow();
        boolean isResolved = true;
        UserAccount empUserAccount = null;
        PatientRegistrationRequest patientRegistrationRequest = (PatientRegistrationRequest) tblPatientDetails.getValueAt(selectedRow, 0);
        Employee careTaker = (Employee) comboCaretaker.getSelectedItem();
        if (selectedRow >= 0) {
            for (Network network : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                for (UserAccount u : o.getUserAccountDirectory().getUserAccountList()) {
                    if (u.getEmployee().getId() == (careTaker.getId())) {
                        empUserAccount = u;
                        break;
                    }
                }
            }
            }
            }
            for (WorkRequest wr : empUserAccount.getWorkQueue().getWorkRequestList()) {
                if (wr instanceof PatientRegistrationRequest) {
                    if (!((PatientRegistrationRequest) wr).getStatus().equals("Resolved")) {
                        isResolved = false;
                        break;
                    }
                }
            }
            if (isResolved) {
                String msg = JOptionPane.showInputDialog("Additional Information");
                patientRegistrationRequest.setCareTaker(careTaker);
                patientRegistrationRequest.setStatus("Assigned Care Taker");
                patientRegistrationRequest.setMessage(msg);
                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    for (UserAccount u : o.getUserAccountDirectory().getUserAccountList()) {
                        if (u.getEmployee().getId() == (careTaker.getId())) {
                            u.getWorkQueue().getWorkRequestList().add(patientRegistrationRequest);
                        }
                    }
                }
                JOptionPane.showMessageDialog(null, "Care Taker is assigned successfully");
                populatePatientsTable();
            } else {
                JOptionPane.showMessageDialog(null, "This Care Taker is already assigned to a Patient. Please select a different Care Taker.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Patient to assign Care Taker!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnAssignActionPerformed

    private void populatePatientsTable() {
        DefaultTableModel enterpriseModel = (DefaultTableModel) tblPatientDetails.getModel();
        enterpriseModel.setRowCount(0);
        for (WorkRequest wr : enterprise.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof PatientRegistrationRequest) {
                Object[] row = new Object[enterpriseModel.getColumnCount()];
                row[0] = ((PatientRegistrationRequest) wr);
                row[1] = ((PatientRegistrationRequest) wr).getHospitalName();
                row[2] = ((PatientRegistrationRequest) wr).getDiagnosticCenter();
                row[3] = ((PatientRegistrationRequest) wr).getDiagnostician();
                row[4] = ((PatientRegistrationRequest) wr).getCareTaker();
                row[5] = ((PatientRegistrationRequest) wr).getSampleId();
                row[6] = ((PatientRegistrationRequest) wr).getPatientName();
                row[7] = ((PatientRegistrationRequest) wr).getStatus();
                row[8] = ((PatientRegistrationRequest) wr).getMessage();
                enterpriseModel.addRow(row);
            }
        }
    }
    
    private void populateCaretakerCombo() {
        comboCaretaker.removeAllItems();
        for (Network network : ecosystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    for (UserAccount u : o.getUserAccountDirectory().getUserAccountList()) {
                        if (u.getRole() instanceof CareTakerRole) {
                            comboCaretaker.addItem(u.getEmployee());
                        }
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JComboBox comboCaretaker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAssignCaretaker;
    private javax.swing.JLabel lblTreatment;
    private javax.swing.JTable tblPatientDetails;
    // End of variables declaration//GEN-END:variables
}
